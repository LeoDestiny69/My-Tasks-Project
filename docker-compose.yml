# docker-compose.yml
services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - todo-network

  

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - nginx
    command: ["tail", "-f", "/dev/null"] # Keep container running for manual execution
    networks:
      - todo-network

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - todo-network

  backend:
    build: ./backend
    environment:
      DB_USER: ${POSTGRES_USER}
      DB_HOST: db
      DB_DATABASE: ${POSTGRES_DB}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PORT: 5432
      PORT: 3001
    depends_on:
      db:
        condition: service_healthy
    networks:
      - todo-network
    

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_BACKEND_URL: https://mytasksproject.duckdns.org/api
    depends_on:
      - backend
    networks:
      - todo-network
    

volumes:
  db-data:

networks:
  todo-network:
    driver: bridge